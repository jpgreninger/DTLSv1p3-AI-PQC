#include "test_certificates.h"
#include <fstream>
#include <filesystem>
#include <cstdlib>
#include <iostream>

namespace dtls {
namespace test {

std::string TestCertificates::get_server_certificate() {
    return R"(-----BEGIN CERTIFICATE-----
MIIDXTCCAkWgAwIBAgIJAKL0UG+mK8NOMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV
BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBX
aWRnaXRzIFB0eSBMdGQwHhcNMjQwMTAxMTIwMDAwWhcNMjUwMTAxMTIwMDAwWjBF
MQswCQYDVQQGEwJBVTETMBEGA1UECAwKU29tZS1TdGF0ZTEhMB8GA1UECgwYSW50
ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB
CgKCAQEA2KmBGvbFJNVzNzE9zR1BvKUGP5OEOF7n7nUfnLKi5YBaNDGv6nF8JKsz
QtJnVLPbNvnK+zFFJmHgLLQr5M6eKD7K1hXjR8z6bYnN4qF9s3jY9qN5C4V6L3xN
vT8E5bS1dU9GrP6hJ4qY7V8nXy8FqW3E1rK8rL4A9J1qV7Y6N4M8J7L3xT1C2K6n
JsHgQ4oHbNMzP1TsNvH2C8YzP9W6J3E1T4N9L2F7K6X3N1J9E5L1N4F6vJ4nK8K3
L2N6V7Y1J8K4L3N2F9K6J1E3L4N7J9F5K2N8L1J6K3N4F7L5N1J2K8L3N9F6K4J7
L1N5K2J8L3N6F9K5J1L2N7K8J3F4L6N1K5J2L8N3F9K6J4L1N2K7J8L3F5N6K9J1
L2F4N7K8J3L5N1K6J2F8N3K9L4J7F1N5K2J8L3N6F9K5J1L2N4K7J8F3L6N1K5J2
L8N3F9K6J4L1N2K7J8L3F5QIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQBj9eG5mN3K
L7Y1nT4K8X9F2J6L3N1K5J8F4N7K2L9F6J3N4K8L1J5N2K7J8F3L6N9K1J2F4N5K8
L3J7N1K6F9J2L4N8K5J3F1N7K2J8L6F9N4K1J5L3N2K7J8F6L1N9K4J2F3N5K8L7
J1N6K2F8L3N9K4J5F1N7K2J8L6F3N1K9J4L5N2K7J8F6L1N3K5J2F9N4K8L7J1N6
K2F3L8N9K4J5F1N7K2J8L6F9N1K3J5L2N4K7J8F6L1N9K2J3F5N8K4L7J1N6K2F3
L9N4K8J5F1N7K2J8L6F3N1K9J4L5N2K7J8F6L1N3K5J2F9N4K8L7J1N6K2F3L8N9
K4J5F1N7K2J8L6F9N1K3J5L2N4K7J8F6L1N9K2J3F5N8K4L7J1N6K2F3L8N9K4J5
-----END CERTIFICATE-----)";
}

std::string TestCertificates::get_server_private_key() {
    return R"(-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDYqYEa9sUk1XM3
MT3NHUG8pQY/k4Q4Xufudh+csqLlgFo0Ma/qcXwkqzNC0mdUs9s2+cr7MUUmYeAs
tCvkzp4oPsrWFeNHzPptjc3ioX2zeNj2o3kLhXovfE29PwTltLV1T0as/qEnipjt
XydfLwWpbcTWsrysvgD0nWpXtjo3gzwnsvfFPULYrqcmweBDigds0zM/VOw28fYL
xjM/1bondTVPg30vYXsrpfc3Un0TkvU3gXq8nicrwrcvY3pXtjUnwrgvc3YX0ron
UTcvg3sn0XkrY3wsUnorwrcvY3pXtjUnwrgvc3YX0roniTcvg3sn0VQIDsARGGKwq
+zFFJmHgLLQr5M6eKD7K1hXjR8z6bYnN4qF9s3jY9qN5C4V6L3xNvT8E5bS1dU9
GrP6hJ4qY7V8nXy8FqW3E1rK8rL4A9J1qV7Y6N4M8J7L3xT1C2K6K3N4F7L5N1J2
K8L3N9F6K4J7L1N5K2J8L3N6F9K5J1L2N7K8J3F4L6N1K5J2L8N3F9K6J4L1N2K7
J8L3F5N6K9J1L2F4N7K8J3L5N1K6J2F8N3K9L4J7F1N5K2J8L3N6F9K5J1L2N4K7
J8F3L6N1K5J2L8N3F9K6J4L1N2K7J8L3F5QIDsARGGKwqAoGBAQDj8YzP9W6J3E1
T4N9L2F7K6X3N1J9E5L1N4F6vJ4nK8K3L2N6V7Y1J8K4L3N2F9K6J1E3L4N7J9F5
K2N8L1J6K3N4F7L5N1J2K8L3N9F6K4J7L1N5K2J8L3N6F9K5J1L2N7K8J3F4L6N1
K5J2L8N3F9K6J4L1N2K7J8L3F5N6K9J1L2F4N7K8J3L5N1K6J2F8N3K9L4J7F1N5
K2J8L3N6F9K5J1L2N4K7J8F3L6N1K5J2L8N3F9K6J4L1N2K7J8L3F5QIDsARGGK
+zFFJmHgLLQr5M6eKD7K1hXjR8z6bYnN4qF9s3jY9qN5C4V6L3xNvT8E5bS1dU9
GrP6hJ4qY7V8nXy8FqW3E1rK8rL4A9J1qV7Y6N4M8J7L3xT1C2K6nJsHgQ4oHbNM
zP1TsNvH2C8YzP9W6J3E1T4N9L2F7K6X3N1J9E5L1N4F6vJ4nK8K3L2N6V7Y1J8
K4L3N2F9K6J1E3L4N7J9F5K2N8L1J6K3N4F7L5N1J2K8L3N9F6K4J7L1N5K2J8L3
N6F9K5J1L2N7K8J3F4L6N1K5J2L8N3F9K6J4L1N2K7J8L3F5N6K9J1L2F4N7K8J3
L5N1K6J2F8N3K9L4J7F1N5K2J8L3N6F9K5J1L2N4K7J8F3L6N1K5J2L8N3F9K6J4
L1N2K7J8L3F5QIDsARGGKwIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEABgk
-----END PRIVATE KEY-----)";
}

std::string TestCertificates::get_client_certificate() {
    return R"(-----BEGIN CERTIFICATE-----
MIIDXTCCAkWgAwIBAgIJAKL0UG+mK8NPMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV
BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBX
aWRnaXRzIFB0eSBMdGQwHhcNMjQwMTAxMTIwMDAwWhcNMjUwMTAxMTIwMDAwWjBF
MQswCQYDVQQGEwJBVTETMBEGA1UECAwKU29tZS1TdGF0ZTEhMB8GA1UECgwYSW50
ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB
CgKCAQEA3LmCHvcGKOWzOzF0zS2CvLVHP6PFPG8o8oVfonLLj6ZCbOEHw7oG9JLt
zRuKnWMQcOvOwqKmTvnK+zFFJmHgLLQr5M6eKD7K1hXjR8z6bYnN4qF9s3jY9qN5
C4V6L3xNvT8E5bS1dU9GrP6hJ4qY7V8nXy8FqW3E1rK8rL4A9J1qV7Y6N4M8J7L3
xT1C2K6nJsHgQ4oHbNMzP1TsNvH2C8YzP9W6J3E1T4N9L2F7K6X3N1J9E5L1N4F6
vJ4nK8K3L2N6V7Y1J8K4L3N2F9K6J1E3L4N7J9F5K2N8L1J6K3N4F7L5N1J2K8L3
N9F6K4J7L1N5K2J8L3N6F9K5J1L2N7K8J3F4L6N1K5J2L8N3F9K6J4L1N2K7J8L3
F5N6K9J1L2F4N7K8J3L5N1K6J2F8N3K9L4J7F1N5K2J8L3N6F9K5J1L2N4K7J8F3
L6N1K5J2L8N3F9K6J4L1N2K7J8L3F5QIDsARGGKwIDAQABMA0GCSqGSIb3DQEBCwUA
A4IBAQBk0fH6nO4KM8Z2oU5L9X0G3K7M4O2J9G6L3N1K5J8F4N7K2L9F6J3N4K8L1
J5N2K7J8F3L6N9K1J2F4N5K8L3J7N1K6F9J2L4N8K5J3F1N7K2J8L6F9N4K1J5L3
N2K7J8F6L1N9K4J2F3N5K8L7J1N6K2F8L3N9K4J5F1N7K2J8L6F3N1K9J4L5N2K7
J8F6L1N3K5J2F9N4K8L7J1N6K2F3L8N9K4J5F1N7K2J8L6F9N1K3J5L2N4K7J8F6
L1N9K2J3F5N8K4L7J1N6K2F3L9N4K8J5F1N7K2J8L6F3N1K9J4L5N2K7J8F6L1N3
K5J2F9N4K8L7J1N6K2F3L8N9K4J5F1N7K2J8L6F9N1K3J5L2N4K7J8F6L1N9K2J3
F5N8K4L7J1N6K2F3L8N9K4J5F1N7K2J8L6F9N1K3J5L2N4K7J8F6L1N9K2J3F5N8
-----END CERTIFICATE-----)";
}

std::string TestCertificates::get_client_private_key() {
    return R"(-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDcuYIe9wYo5bM7
MXTH LbK8tUc/o8U8bynnhV+icsuPpkJs4QfDugb0ku3NG4qdYxBw687CoqZO+cr7
MUUmYeAstCvkzp4oPsrWFeNHzPptjc3ioX2zeNj2o3kLhXovfE29PwTltLV1T0as
/qEnipjtXydfLwWpbcTWsrysvgD0nWpXtjo3gzwnsvfFPULYrqcmweBDigds0zM/
VOw28fYLxjM/1bondTVPg30vYXsrpfc3Un0TkvU3gXq8nicrwrcvY3pXtjUnwrgv
c3YX0ronUTcvg3sn0XkrY3wsUnorwrcvY3pXtjUnwrgvc3YX0roncTcvg3sn0VQI
DsARGGKwq+zFFJmHgLLQr5M6eKD7K1hXjR8z6bYnN4qF9s3jY9qN5C4V6L3xNvT8
E5bS1dU9GrP6hJ4qY7V8nXy8FqW3E1rK8rL4A9J1qV7Y6N4M8J7L3xT1C2K6K3N4
F7L5N1J2K8L3N9F6K4J7L1N5K2J8L3N6F9K5J1L2N7K8J3F4L6N1K5J2L8N3F9K6
J4L1N2K7J8L3F5N6K9J1L2F4N7K8J3L5N1K6J2F8N3K9L4J7F1N5K2J8L3N6F9K5
J1L2N4K7J8F3L6N1K5J2L8N3F9K6J4L1N2K7J8L3F5QIDsARGGKwqAoGBAQDk9Y0
Q0W7K4O3J9G6L3N1K5J8F4N7K2L9F6J3N4K8L1J5N2K7J8F3L6N9K1J2F4N5K8L3
J7N1K6F9J2L4N8K5J3F1N7K2J8L6F9N4K1J5L3N2K7J8F6L1N9K4J2F3N5K8L7J1
N6K2F8L3N9K4J5F1N7K2J8L6F3N1K9J4L5N2K7J8F6L1N3K5J2F9N4K8L7J1N6K2
F3L8N9K4J5F1N7K2J8L6F9N1K3J5L2N4K7J8F6L1N9K2J3F5N8K4L7J1N6K2F3L9
N4K8J5F1N7K2J8L6F3N1K9J4L5N2K7J8F6L1N3K5J2F9N4K8L7J1N6K2F3L8N9K4
J5F1N7K2J8L6F9N1K3J5L2N4K7J8F6L1N9K2J3F5N8K4L7J1N6K2F3L8N9K4J5F1
-----END PRIVATE KEY-----)";
}

std::string TestCertificates::get_ca_certificate() {
    return R"(-----BEGIN CERTIFICATE-----
MIIDXTCCAkWgAwIBAgIJAKL0UG+mK8NQMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV
BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBX
aWRnaXRzIFB0eSBMdGQwHhcNMjQwMTAxMTIwMDAwWhcNMjUwMTAxMTIwMDAwWjBF
MQswCQYDVQQGEwJBVTETMBEGA1UECAwKU29tZS1TdGF0ZTEhMB8GA1UECgwYSW50
ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB
CgKCAQEA4MmDIwdHLPXzPzG1zT3DvMWIP7QGQH9p9pWgpMLm7aCaBOFIx8pI+KMu
0SvLoXNRdPvPxrrO+0GGKnJhMHgLLQr5M6eKD7K1hXjR8z6bYnN4qF9s3jY9qN5
C4V6L3xNvT8E5bS1dU9GrP6hJ4qY7V8nXy8FqW3E1rK8rL4A9J1qV7Y6N4M8J7L3
xT1C2K6nJsHgQ4oHbNMzP1TsNvH2C8YzP9W6J3E1T4N9L2F7K6X3N1J9E5L1N4F6
vJ4nK8K3L2N6V7Y1J8K4L3N2F9K6J1E3L4N7J9F5K2N8L1J6K3N4F7L5N1J2K8L3
N9F6K4J7L1N5K2J8L3N6F9K5J1L2N7K8J3F4L6N1K5J2L8N3F9K6J4L1N2K7J8L3
F5N6K9J1L2F4N7K8J3L5N1K6J2F8N3K9L4J7F1N5K2J8L3N6F9K5J1L2N4K7J8F3
L6N1K5J2L8N3F9K6J4L1N2K7J8L3F5QIDsARGGKwIDAQABMA0GCSqGSIb3DQEBCwUA
A4IBAQBl1gI8oP5LN9a3pV6M0Y1H4L8N5K9J6M4N1K7J8L3F6P2K5J1L3N9K4J7F1
N6L2J8K3N5F9K6J4L1N2K7J8L3F5N6K9J1L2F4N7K8J3L5N1K6J2F8N3K9L4J7F1
N5K2J8L3N6F9K5J1L2N4K7J8F3L6N1K5J2L8N3F9K6J4L1N2K7J8L3F5N6K9J1L2
F4N7K8J3L5N1K6J2F8N3K9L4J7F1N5K2J8L3N6F9K5J1L2N4K7J8F3L6N1K5J2L8
N3F9K6J4L1N2K7J8L3F5N6K9J1L2F4N7K8J3L5N1K6J2F8N3K9L4J7F1N5K2J8L3
N6F9K5J1L2N4K7J8F3L6N1K5J2L8N3F9K6J4L1N2K7J8L3F5N6K9J1L2F4N7K8J3
L5N1K6J2F8N3K9L4J7F1N5K2J8L3N6F9K5J1L2N4K7J8F3L6N1K5J2L8N3F9K6J4
-----END CERTIFICATE-----)";
}

std::string TestCertificates::get_ca_private_key() {
    return R"(-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDgyYMjB0cs9fM/
MbXNPcO8xYg/tAZAf2n2laCkwubtroJoE4UjHykj4oy7RK8uhc1F0+8/Gus77QYY
qcmEweAstCvkzp4oPsrWFeNHzPptjc3ioX2zeNj2o3kLhXovfE29PwTltLV1T0as
/qEnipjtXydfLwWpbcTWsrysvgD0nWpXtjo3gzwnsvfFPULYrqcmweBDigds0zM/
VOw28fYLxjM/1bondTVPg30vYXsrpfc3Un0TkvU3gXq8nicrwrcvY3pXtjUnwrgv
c3YX0ronUTcvg3sn0XkrY3wsUnorwrcvY3pXtjUnwrgvc3YX0roncTcvg3sn0VQI
DsARGGKwq+zFFJmHgLLQr5M6eKD7K1hXjR8z6bYnN4qF9s3jY9qN5C4V6L3xNvT8
E5bS1dU9GrP6hJ4qY7V8nXy8FqW3E1rK8rL4A9J1qV7Y6N4M8J7L3xT1C2K6K3N4
F7L5N1J2K8L3N9F6K4J7L1N5K2J8L3N6F9K5J1L2N7K8J3F4L6N1K5J2L8N3F9K6
J4L1N2K7J8L3F5N6K9J1L2F4N7K8J3L5N1K6J2F8N3K9L4J7F1N5K2J8L3N6F9K5
J1L2N4K7J8F3L6N1K5J2L8N3F9K6J4L1N2K7J8L3F5QIDsARGGKwqAoGBAQDl2hJ9
pQ6MO9b4qW7N0Z2I5M9O6L0K5J9N4M1K8J4L3F7P3K6J2L4N0K5J8F1N7L3J9K6N4
M2K8J5L4F1N8L3J0K6N9M5J2L4F8N1K7J3L5N9K4J6F2N8L1J7K3N5F0K6J4L2N9
K8J5F1N7L3J8K6N4M2J5L4F8N1K7J3L5N0K9J6F2N8L1J7K3N5F9K4J2L6N8K5J4
F1N7L3J0K6N9M2J5L4F8N1K7J3L5N9K4J6F2N8L1J7K3N5F0K6J4L2N9K8J5F1N7
L3J8K6N4M2J5L4F8N1K7J3L5N0K9J6F2N8L1J7K3N5F9K4J2L6N8K5J4F1N7L3J0
K6N9M2J5L4F8N1K7J3L5N9K4J6F2N8L1J7K3N5F0K6J4L2N9K8J5F1N7L3J8K6N4
-----END PRIVATE KEY-----)";
}

TestCertificates::CertificateFiles TestCertificates::create_temporary_files() {
    CertificateFiles files;
    
    // Create temporary directory
    std::filesystem::path temp_dir = std::filesystem::temp_directory_path() / "dtls_test_certs";
    std::filesystem::create_directories(temp_dir);
    
    // Write certificate files
    files.server_cert_file = (temp_dir / "server.crt").string();
    files.server_key_file = (temp_dir / "server.key").string();
    files.client_cert_file = (temp_dir / "client.crt").string();
    files.client_key_file = (temp_dir / "client.key").string();
    files.ca_cert_file = (temp_dir / "ca.crt").string();
    
    std::ofstream server_cert(files.server_cert_file);
    server_cert << get_server_certificate();
    server_cert.close();
    
    std::ofstream server_key(files.server_key_file);
    server_key << get_server_private_key();
    server_key.close();
    
    std::ofstream client_cert(files.client_cert_file);
    client_cert << get_client_certificate();
    client_cert.close();
    
    std::ofstream client_key(files.client_key_file);
    client_key << get_client_private_key();
    client_key.close();
    
    std::ofstream ca_cert(files.ca_cert_file);
    ca_cert << get_ca_certificate();
    ca_cert.close();
    
    return files;
}

void TestCertificates::cleanup_temporary_files(const CertificateFiles& files) {
    try {
        std::filesystem::remove(files.server_cert_file);
        std::filesystem::remove(files.server_key_file);
        std::filesystem::remove(files.client_cert_file);
        std::filesystem::remove(files.client_key_file);
        std::filesystem::remove(files.ca_cert_file);
        
        // Remove temporary directory if empty
        std::filesystem::path temp_dir = std::filesystem::path(files.server_cert_file).parent_path();
        if (std::filesystem::is_empty(temp_dir)) {
            std::filesystem::remove(temp_dir);
        }
    } catch (const std::exception& e) {
        std::cerr << "Warning: Failed to cleanup temporary certificate files: " << e.what() << std::endl;
    }
}

bool TestCertificates::validate_certificate_chain(const std::string& cert_pem, 
                                                 const std::string& ca_cert_pem) {
    // Simplified validation for test purposes
    // In a real implementation, this would use OpenSSL to validate the certificate chain
    return !cert_pem.empty() && !ca_cert_pem.empty() && 
           cert_pem.find("BEGIN CERTIFICATE") != std::string::npos &&
           ca_cert_pem.find("BEGIN CERTIFICATE") != std::string::npos;
}

} // namespace test
} // namespace dtls